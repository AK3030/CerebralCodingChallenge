{"version":3,"sources":["brainicon.png","paperairplane.png","redux/question.js","Message.js","validateQuestion.js","MessageInputBar.js","redux/message.js","ChatWindow.js","App.js","serviceWorker.js","redux/rootReducer.js","index.js","store.js"],"names":["module","exports","__webpack_require__","p","setQuestion","questionId","type","putAnswer","answer","id","url","concat","fetch","method","body","JSON","stringify","MainDiv","styled","div","_templateObject","User","_templateObject2","MessageBody","_templateObject3","Message","userStyle","this","props","username","color","react_default","a","createElement","style","message","Component","optionsValidation","userAnswer","fullQuestion","validation","paths","matchedAnswer","find","regexValidation","regexVal","regex","RegExp","test","validateQuestion","Array","isArray","MessageInputContainer","MessageInputBar_templateObject","MessageInput","textarea","MessageInputBar_templateObject2","SendMessageButton","MessageInputBar_templateObject3","PaperAirplaneImage","img","_templateObject4","MessageInputBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sendMessage","addMessage","user","state","currentFullQuestion","questionData","question","currentQuestion","userMessage","validAnswer","putAnswerAction","invalidMessage","options","join","clearInput","e","setState","prevSate","updateMessage","target","value","handleKeyPress","key","preventDefault","_this2","ref","el","messageInput","placeholder","onKeyPress","onChange","onClick","src","Plane","connect","dispatch","nextQuestion","then","response","json","error","console","log","Main","ChatWindow_templateObject","TitleBar","ChatWindow_templateObject2","MessageWindow","ChatWindow_templateObject3","BottomScroll","ChatWindow_templateObject4","BrainImage","_templateObject5","ChatWindow","scrollToBottom","bottomOfMessages","scrollIntoView","BrainIcon","messages","map","index","src_Message","src_MessageInputBar","createGlobalStyle","App_templateObject","styledNormalize","App_templateObject2","App","App_MainDiv","src_ChatWindow","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","toConsumableArray","ReactDOM","render","es","store","createStore","rootReducer","applyMiddleware","thunk","logger","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93622e78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brainicon.7c36420b.png\";","module.exports = __webpack_public_path__ + \"static/media/paperairplane.ce33edf7.png\";","//actions\nexport const incrementQuestion = () => {\n    return {\n        type: 'INCREMENT_QUESTION',\n    }\n};\n\nexport const setQuestion = (questionId) => {\n\n    return {\n        type: 'SET_QUESTION',\n        questionId\n    }\n}\n\nexport const putAnswerAction = (answer, id, nextQuestion) => dispatch => {\n    return putAnswer(answer, id)\n        .then(response => {\n\n            return response.json()\n        },\n            error => console.log('An error occurred.', error)\n        )\n        .then(questionId => {\n            dispatch(setQuestion(nextQuestion))\n        }\n        )\n}\n\n//reducer\nexport default (state = 1, action) => {\n    switch (action.type) {\n        case 'INCREMENT_QUESTION':\n            return state + 1;\n        case 'SET_QUESTION':\n            return action.questionId\n        default:\n            return state;\n    }\n}\n\n//fetch request\nexport const putAnswer = (answer, id) => {\n    let questionId = id;\n    if (questionId === -1) {\n        questionId = 9;\n    }\n    else if (questionId === 0) {\n        questionId = 10;\n    }\n    let url = `https://jsonplaceholder.typicode.com/posts/${questionId}`;\n    return fetch(url, {\n        method: 'PUT',\n        body: JSON.stringify(answer)\n    })\n}","import React, { Component } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\n\nconst MainDiv = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  font-weight: 600;\n  flex-shrink: 0;\n`\n\nconst User = styled.div`\n  margin-bottom: 5px;\n  margin-top: 5px;\n  color: #709DE6;\n`\n\nconst MessageBody = styled.div`\n  color: #CBD3DC;\n  font-size: 15px;\n`\n\nclass Message extends Component {\n\n  render() {\n    const userStyle = this.props.username === 'Cerebral' ? { color: '#5D6979' } : null;\n    return (\n      <MainDiv>\n        <User style={userStyle}>{this.props.username + \":\"}</User>\n        <MessageBody>{this.props.message}</MessageBody>\n      </MainDiv>\n    );\n  }\n}\n\nexport default Message;","//returns path to next question or false for invalid answer\nconst validateQuestion = (userAnswer, fullQuestion) => {\n  if (Array.isArray(fullQuestion.validation)) {\n    return optionsValidation(userAnswer, fullQuestion)\n  }\n  else if (typeof fullQuestion.validation === \"string\") {\n    return regexValidation(userAnswer, fullQuestion);\n  }\n  else {\n    if (fullQuestion.validation) {\n      return fullQuestion.paths\n    }\n    else {\n      return;\n    }\n  }\n\n}\n\nconst optionsValidation = (userAnswer, fullQuestion) => {\n  let validation = fullQuestion.validation;\n  let paths = fullQuestion.paths;\n  \n  let id = fullQuestion.id\n  let matchedAnswer = validation.find((answer) => answer === userAnswer)\n  if (matchedAnswer) {\n    if (paths[matchedAnswer]) {\n      return paths[matchedAnswer];\n    }\n    else {\n      return paths;\n    }\n    \n  }\n  else {\n    return false;\n  }\n}\n\nconst regexValidation = (userAnswer, fullQuestion) => {\n  let regexVal = fullQuestion.validation\n  let regex = RegExp(regexVal);\n  let paths = fullQuestion.paths;\n  if (regex.test(userAnswer)) {\n    return paths;\n  }\n  else {\n    return false;\n  }\n}\n\nexport default validateQuestion","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport questionData from './questionData';\nimport validateQuestion from './validateQuestion';\nimport Plane from './paperairplane.png';\nimport { addMessage } from './redux/message';\nimport { putAnswerAction } from './redux/question';\n\n\nconst MessageInputContainer = styled.div`\n    width: 100%;\n    background-color: #ECF5F6;\n    display: flex;\n    align-items: center;\n    box-sizing: border-box;\n    font-weight: 600;\n    color: #5D6979;\n    height: 27%;\n    justify-content: center;\n    padding-left: 10px;\n    padding-right: 10px;\n`\n\nconst MessageInput = styled.textarea`\n    height: 55%;\n    width: 70%;\n    resize: none;\n    border-radius: 3px;\n    border: 1px solid #DDE4ED;\n    color: #CBD3DC;\n    font-size: 15px;\n    font-weight: 600;\n    padding-left: 10px;\n    box-sizing: border-box;\n    flex-grow: 1;\n    padding-top: 8px;\n    &::placeholder {\n        color: #CBD3DC;\n        font-size: 15px;\n        font-weight: 600;\n    }\n`\n\nconst SendMessageButton = styled.div`\n    background-color: #5294FC;\n    height: 55%;\n    width: 90px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 5px;\n    &:hover {\n        cursor: pointer;\n    }\n    margin-left: 12px;\n\n`\n\nconst PaperAirplaneImage = styled.img`\n    width: 28%;\n    filter: invert(100%);\n`\n\nclass MessageInputBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    //add user message to chat window/redux and validate after \n    sendMessage = () => {\n        this.props.addMessage({ user: 'Me', body: this.state.message });\n        let currentFullQuestion = questionData.find(question => question.id === this.props.currentQuestion)\n        let userMessage = this.state.message\n        let validAnswer = validateQuestion(userMessage, currentFullQuestion);\n        if (validAnswer) {\n            //if valid answer then send to server\n            this.props.putAnswerAction(validAnswer, currentFullQuestion.id, validAnswer);\n        }\n        else {\n            // if invalid answer tell user to try again\n            let invalidMessage = 'Invalid Answer, try again.';\n            if (Array.isArray(currentFullQuestion.validation)) {\n                var options = currentFullQuestion.validation.join(\", \");\n\n                invalidMessage += ` Options: ${options}`;\n            }\n            this.props.addMessage({ user: 'Cerebral', body: invalidMessage });\n        }\n\n        this.clearInput();\n    }\n\n    clearInput = (e) => {\n        this.setState(prevSate => ({ message: \"\" }))\n    }\n\n    updateMessage = (e) => {\n        const message = e.target.value;\n        this.setState((prevSate, props) => ({ message: message }))\n    }\n\n    handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            this.sendMessage();\n        }\n    }\n\n    render() {\n        return (\n            <MessageInputContainer>\n                <MessageInput ref={el => { this.messageInput = el }}\n                    placeholder=\"Type here...\"\n                    onKeyPress={this.handleKeyPress}\n                    value={this.state.message}\n                    onChange={this.updateMessage} />\n                <SendMessageButton onClick={this.sendMessage}>\n                    <PaperAirplaneImage src={Plane} />\n                </SendMessageButton>\n            </MessageInputContainer>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentQuestion: state.currentQuestion,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    addMessage: (message) => dispatch(addMessage(message)),\n    putAnswerAction: (answer, id, nextQuestion) => dispatch(putAnswerAction(answer, id, nextQuestion))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageInputBar);","import questionData from '../questionData';\n\n//actions\nexport const addMessage = message => {\n    return {\n        type: 'ADD_MESSAGE',\n        message\n    }\n};\n\n//reducer\nexport default (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_MESSAGE':\n            return [...state, action.message]\n        case 'SET_QUESTION':\n            let questionBody = questionData.find( question => question.id === action.questionId).question;\n            let message = {user: 'Cerebral', body: questionBody}\n            return [...state, message]\n        default:\n            return state\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n// import fetchJsonp from 'fetch-jsonp';\nimport { setQuestion } from './redux/question';\nimport Message from './Message';\nimport BrainIcon from './brainicon.png';\nimport MessageInputBar from './MessageInputBar'\n\nconst Main = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 40%;\n  height: 45%;\n  box-shadow: 5px 20px 30px rgba(0, 0, 0, 0.25);\n  min-width: 350px;\n  min-height: 250px;\n\n  @media (max-width: 450px) {\n    width: 100%;\n  }\n`\n\nexport const TitleBar = styled.div`\n  width: 100%;\n  flex-grow: 1;\n  background-color: #ECF5F6;\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  padding-left: 20px;\n  font-weight: 600;\n  color: #5D6979;\n`\n\nconst MessageWindow = styled.div`\n  height: 55%;\n  width: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  padding-right: 20px;\n  padding-left: 20px;\n  background-color: white;\n  padding-bottom: 4px;\n`\n\nconst BottomScroll = styled.div`\n\n`\n\nconst BrainImage = styled.img`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  margin-right: 5px;\n  border: 1px solid green;\n  filter: invert(100%);\n`\n\nclass ChatWindow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  //start at question 0 on window load\n  componentDidMount() {\n    this.scrollToBottom();\n    this.props.setQuestion(0);\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n    this.bottomOfMessages.scrollIntoView();\n  }\n\n  render() {\n    return (\n      <Main>\n        <TitleBar>\n          <BrainImage src={BrainIcon} />\n          Cerebral\n        </TitleBar>\n        <MessageWindow>\n          {this.props.messages.map((message, index) => <Message message={message.body} username={message.user} key={index} />)}\n          <BottomScroll ref={el => { this.bottomOfMessages = el }}></BottomScroll>\n        </MessageWindow>\n        <MessageInputBar />\n      </Main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  messages: state.messages,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setQuestion: (id) => dispatch(setQuestion(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatWindow);","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport ChatWindow from './ChatWindow';\nimport styled from 'styled-components';\nimport styledNormalize from 'styled-normalize';\nimport { createGlobalStyle } from 'styled-components';\n\n\ncreateGlobalStyle`\n    ${styledNormalize};\n`\n\nconst MainDiv = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  background-color: #C5EEF0;\n`\n\nclass App extends Component {\n\n  render() {\n    return (\n      <MainDiv>\n        <ChatWindow/>  \n      </MainDiv>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport messageReducer from './message';\nimport currentQuestionReducer from './question';\nexport default combineReducers({\n    messages: messageReducer,\n    currentQuestion: currentQuestionReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n     <App />\n    </Provider>,\n    document.getElementById('root')\n   );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './redux/rootReducer';\nimport logger from 'redux-logger';\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    applyMiddleware(thunk, logger)\n  );\n}"],"sourceRoot":""}